<?php
// $Id $

/**
 * @file
 * Stars with Stripes core module. 
 */

/**
 * Implementation of hook_menu().
 */
function sws_menu() {
  $items = array();

  $items['admin/settings/starswithstripes'] = array(
    'title' => t('Stars with Stripes: Settings'), 
    'description' => t('Configure site-wide settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sws_admin_settings'),
    'access arguments' => array('administer sws'), 
    'type' => MENU_NORMAL_ITEM,
    'file' => 'sws.admin.inc', 
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function sws_perm() {
  return array('administer sws');
}

/**
 * Implementation of hook_block().
 */
function sws_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0]['info'] = t('SWS Website Footer');
    return $blocks;
  } else if ($op == 'view') {
      switch($delta) {
        case 0:
          $block['subject'] = '';
          $block['content'] = check_markup(variable_get('sws_site_footer', NULL));
        break;
      }
    }
  return $block;
}
 

/**
 * Implementation of hook_nodeapi().
 * 
 * $op = 'presave'
 *   Auto-generate teasers for the custom teaser field.
 * 
 * TODO Add ability for users to add field to CCK group
 *      and have own variables surface in template files for custom 
 *      theming. 
 * 
 * TODO move sws.module nodeapi code into features modules
 * TODO handle field formatting with CCK formatters. Exclude undesired fields
 *      rather than unset here. 
 */
function sws_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch($op) {
    case 'presave':
      /**
       * Teaser fields allow for teasers to be crafted separate
       * from the node body. This also makes it easy to set a max
       * length by simply setting it in CCK.
       */
      // Save auto-generated teaser if no custom teaser is created.
      if ($node->field_teaser_auto[0]['value']) {
        // Auto-generate teaser
        $body = $node->body;
        // $body = check_markup($node->body);
        $teaser = substr($body, 0, 255);
        $teaser .= '...';
        // use HTML corrector filter (delta = 3) to correct broken html
        $teaser = filter_filter('process', 3, -1, $teaser);
        $node->field_teaser[0]['value'] = $teaser;
      }
        
      break;
    case 'view':
      // CCK adds CSS in hook_init. But I don't think we need to add this to every page.
      // TODO confirm this is the right decision on when/where to add css.
      $path = drupal_get_path('module', 'sws') .'/theme';
      drupal_add_css("$path/sws.css");
      // TODO provide some kind of settings UI so users can add sws fields to their 
      //      own CCK content types and have sws handle those fields here.
      $type = $node->type;
      // page view
      if ($a4 || (arg(1) == 'feed' && arg(2) != 'full')) {
      
      // Order special fields like this: 
      // video (always on top), weight 0
      // map (top, below video, or bottom), weight 1 or 4
      // pics, weight 2 (float in body)
      // body, weight 3

      // TODO Attachements still inherit default weights from CCK
      // and they're weighted around 550. Change the count -1000.

        // Body
        // Note: Other modules tinker with body's weight.
        // This lets us put the body where we want it. But 
        // we don't unset body, incase another module want to 
        // do something with it.
        $node->content['sws_body'] = $node->content['body'];
       // $node->content['sws_body']['#weight'] = 3;
        $node->content['sws_body']['#weight'] = -997;
        $node->content['body']['#value'] = '';

        // Teaser
        unset($node->content['field_teaser']);
        unset($node->content['field_teaser_auto']); 

        // Related posts
        unset($node->content['field_related_posts']);
  
        // Video
        // if there's video content      
        if ($node->field_video_url[0]) {
          // add it as an sws field
          $node->content['sws_video_field'] = array(
            '#value' => theme('sws_video', $node),
            // '#weight' => 0, // above body
            '#weight' => -1000, // above body
          );
        }
        // Unset fields that shouldn't be displayed by CCK.
        unset($node->content['field_video_url']);
        unset($node->content['field_video_size']);
        unset($node->content['field_video_align']);
        unset($node->content['field_video_autoplay']);     

        // Pictures.
        // add pic content
        if ($node->field_pic[0]) {
          $node->content['sws_pic_field'] = array(
            '#value' => theme('sws_pic', $node),
            // '#weight' => 2,
            '#weight' => -998,
          );
        }
        // Unset fields that shouldn't be displayed by CCK.
        unset($node->content['field_pic']);
        unset($node->content['field_pic_size']);
        unset($node->content['field_pic_align']);

        // Content-type specific...
        switch ($type) {

          case 'bio':
            // Don't show weight that controls sort order on /staff page
            unset($node->content['field_bio_weight']);
            break;

          case 'event': 
            // Map
            $node->content['field_event_date']['#weight'] = -1000;
            if ($node->field_map[0]) {
              $map_position = check_plain($node->field_map_position[0]['value']);
              //$weight = ($map_position == 'top') ? 1 : 4;
              $weight = ($map_position == 'top') ? -999 : -994;
              $node->content['sws_map_field'] = array(
                '#value' => theme('sws_map', $node),
                '#weight' => $weight, 
              );
            }
            // unset fields we don't need anymore
            unset($node->content['field_map']); 
            unset($node->content['field_map_position']);
            break;

          case 'news_clip': 
            $node->content['sws_newsclip_header'] = array(
              '#value' => theme('sws_newsclip_header', $node),
              //'#weight' => -1,
              '#weight' => -1000,
            );
            $node->content['sws_newsclip_footer'] = array(
              '#value' => theme('sws_newsclip_footer', $node),
              //'#weight' => 10,
              '#weight' => 10,
            );
            // unset fields we don't need anymore
            unset($node->content['field_news_contact']);
            unset($node->content['field_news_by']);
            unset($node->content['field_news_subhead']);
            unset($node->content['field_newsclip_date']);
            unset($node->content['field_news_org']);
            unset($node->content['field_newsclip_url']);
            break;

          case 'news_organization': 
            if ($node->field_news_org_logo[0] && $node->field_news_display_banner[0]['value']){
              $node->content['sws_news_org_logo_field'] = array(
                '#value' => theme('sws_news_org_banner', $node),
                //'#weight' => 0,
                '#weight' => -1000,
              );
            }
            unset($node->content['field_news_org_logo']);
            break;

          case 'press_release':
            $node->content['sws_pr_header'] = array(
              '#value' => theme('sws_pr_header', $node),
              //'#weight' => -1,
              '#weight' => -999,
            );
            $node->content['sws_pr_footer'] = array(
              '#value' => theme('sws_pr_footer', $node),
              //'#weight' => 10,
              '#weight' => 10,
            );
            // unset fields we don't need anymore
            unset($node->content['field_pr_status']);
            unset($node->content['field_pr_subhead']);
            unset($node->content['field_pr_datestamp']);
            unset($node->content['field_pr_contact']);
            break;

        } // end switch($type)
      } elseif ($a3) { // teaser view
           // TODO Handle teaser view with custom teaser field
           // and teaser template.
           //   Note: Keep an eye on this module too:
           //   http://drupal.org/project/cck_teaser
        } // end if ($a3)
      break;
  } // end switch ($op)
}

/**
 * Implementation of hook_theme().
 */
function sws_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', 'sws') .'/theme';
  drupal_add_css("$path/sws.css");
  require_once "./$path/theme.inc";

  return array(
    'sws_video' => array(
      'template' => 'sws-video-field',
      'file' => 'theme.inc',
      'arguments' => array('node' => NULL), 
      'path' => $path,
    ),
    'sws_pic' => array(
      'template' => 'sws-pic-field',
      'file' => 'theme.inc',
      'arguments' => array('node' => NULL),
      'path' => $path,
    ),
    'sws_map' => array(
      'template' => 'sws-map-field',
      'file' => 'theme.inc',
      'arguments' => array('node' => NULL),
      'path' => $path, 
    ),
    'sws_pr_header' => array(
      'template' => 'sws-pr-header',
      'file' => 'theme.inc',
      'arguments' => array('node' => NULL),
      'path' => $path, 
    ),
    'sws_pr_footer' => array(
      'template' => 'sws-pr-footer',
      'file' => 'theme.inc',
      'arguments' => array('node' => NULL),
      'path' => $path, 
    ),
    'sws_newsclip_header' => array(
      'template' => 'sws-newsclip-header',
      'file' => 'theme.inc',
      'arguments' => array('node' => NULL),
      'path' => $path,  
    ),
    'sws_newsclip_footer' => array(
      'template' => 'sws-newsclip-footer',
      'file' => 'theme.inc',
      'arguments' => array('node' => NULL),
      'path' => $path,  
    ),
    'sws_news_org_banner' => array(
      'template' => 'sws-news-org-banner',
      'file' => 'theme.inc',
      'arguments' => array('node' => NULL),
      'path' => $path, 
    ),
  ); 
}

/**
 * Test form submission.
 */
/*
function sws_submit_test(&$form, &$form_state){
dsm($form, '$form');
dsm($form_state, '$form_state');
variable_set('sws dev', $form_state);
}
// */

/**
 * Implementation of hook_formalter().
 */
function sws_form_alter(&$form, $form_state, $form_id) {
//dsm($form_id);

  if (substr($form_id, -9) == 'node_form') {
    // Don't include menu settings option on node forms.
    unset($form['menu']);
    // Any authenticated user 
    // with create content permissions should be able 
    // to publish/unpublish. (Not just people with 
    // 'administer node' permissions.)
    // Note: This also seems to get rid of 
    // sticky and promote to front (which seems fine).
    if (user_is_logged_in()) {
      $form['options'] = array(
        '#type' => 'fieldset',
        '#access' => true,
        '#title' => t('Publishing options'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#weight' => 25,
      );  
      $form['options']['status'] = array(
        '#type' => 'checkbox',
        '#title' => t('Published'),
        '#default_value' => $form['#node']->status,
      );
    }
  }

  // TODO Create admin setting to enable/disable field_news_contact on newsclips
  if ($form_id == 'news_clip_node_form') {
    unset($form['field_news_contact']);
  }

  if ((arg(0) == 'node') && (arg(1) == 'add' || arg(2) == 'edit')) { 
    // Preview doesn't display node correctly, get rid of button.
    unset($form['buttons']['preview']);
    // Get rid of default Drupal teaser buttons.
    unset($form['body_field']['teaser_js']);
    unset($form['body_field']['teaser_include']);
  }

  // Alter Features form
  if ($form_id == 'features_admin_form' && !user_access('administer features')) {
    // @TODO cruft? can we delete this?
    unset($form['testing']);
  }
}

